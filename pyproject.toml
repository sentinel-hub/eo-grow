[build-system]
requires = ['hatchling']
build-backend = 'hatchling.build'

[tool.hatch.version]
path = 'eogrow/__init__.py'

[tool.hatch.build.targets.sdist]
include = ['/README.md', '/LICENSE.md', '/eogrow']

[tool.hatch.build.targets.wheel]
include = ['/eogrow']

[project]
name = "eo-grow"
dynamic = ["version"]
description = "Earth observation framework for scaled-up processing in Python"
readme = "README.md"
requires-python = ">= 3.8"
license = { file = "LICENSE" }
authors = [
    { name = "Sinergise EO research team", email = "eoresearch@sinergise.com" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Image Processing",
]
dependencies = [
    "click",
    "colorlog",
    "eo-learn[VISUALIZATION]>=1.5.0",
    "fiona",
    "fs>=2.2.0",
    "geopandas>=0.8.1",
    "numpy",
    "opencv-python-headless",
    "pandas",
    "pydantic>=1.8.0, <2.0",
    "python-rapidjson",
    "rasterio",
    "ray[default]",
    "sentinelhub>=3.6.2",
    "shapely>=1.8.0",
    "typing-extensions",
]

[project.optional-dependencies]
ml = [
    "joblib",
    "lightgbm>=3.0.0",
    "scikit-learn",
]
docs = [
    "autodoc_pydantic",
    "nbsphinx",
    "sphinx_mdinclude",
    "sphinx-rtd-theme==1.3.0",
    "sphinx==7.1.2",
]
dev = [
    "eo-grow[ML]",
    "boto3",
    "build",
    "deepdiff",
    "fs_s3fs",
    "moto",
    "mypy>=0.990",
    "pre-commit",
    "pyogrio",
    "pytest-cov",
    "pytest-lazy-fixture",
    "pytest-order",
    "pytest>=4.0.0",
    "requests-mock",
    "scipy",
    "twine",
    "types-mock",
    "types-requests",
    "types-setuptools",
    "types-urllib3",
]


[project.urls]
Homepage = "https://github.com/sentinel-hub/eo-grow"
Documentation = "https://eo-grow.readthedocs.io"
Issues = "https://github.com/sentinel-hub/eo-grow/issues"
Source = "https://github.com/sentinel-hub/eo-grow"
Forum = "https://forum.sentinel-hub.com"

[project.scripts]
eogrow = "eogrow.cli:run_pipeline"
eogrow-ray = "eogrow.cli:run_pipeline_on_cluster"
eogrow-template = "eogrow.cli:make_template"
eogrow-validate = "eogrow.cli:validate_config"
eogrow-test = "eogrow.cli:run_test_pipeline"

[tool.black]
line-length = 120
preview = true

[tool.ruff]
line-length = 120
target-version = "py38"
select = [
    "F",   # pyflakes
    "E",   # pycodestyle
    "W",   # pycodestyle
    "C90", # mccabe
    "N",   # naming
    "YTT", # flake-2020
    "B",   # bugbear
    "A",   # built-ins
    "COM", # commas
    "C4",  # comprehensions
    "T10", # debugger statements
    "ISC", # implicit string concatenation
    "ICN", # import conventions
    "G",   # logging format
    "PIE", # flake8-pie
    "T20", # print statements
    "PT",  # pytest style
    "RET", # returns
    "SLF", # private member access
    "SIM", # simplifications
    "ARG", # unused arguments
    "PD",  # pandas
    "PGH", # pygrep hooks (useless noqa comments, eval statements etc.)
    "FLY", # flynt
    "RUF", # ruff rules
    "NPY", # numpy
    "I",   # isort
]
fix = true
fixable = [
    "I",     # sort imports
    "F401",  # remove redundant imports
]
ignore = [
    "C408",   # complains about `dict()` calls, we use them to avoid too many " in the code
    "SIM117", # wants to always combine `with` statements, gets ugly for us
    "SIM108", # tries to aggresively inline `if`, not always readable
    "A003",   # complains when ATTRIBUTES shadow builtins, we have objects that implement `filter` and such
    "COM812", # trailing comma missing, fights with black
    "PD011",  # suggests `.to_numpy` instead of `.values`, also does this for non-pandas objects...
    "N805", # complains about first arguments not being self, but pydantic validators are like that...
    # potentially fixable
    "B904",  # want `raise ... from None` instead of just `raise ...`
    "B028",  # always demands a stacklevel argument when warning
    "PT011", # complains for `pytest.raises(ValueError)` but we use it a lot
    "UP024", # wants to switch IOError with OSError
]
per-file-ignores = { "__init__.py" = ["F401"] }
exclude = [".git", "__pycache__", "build", "dist"]


[tool.ruff.isort]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "our-packages",
    "first-party",
    "local-folder",
]
known-first-party = ["eogrow"]
sections = { our-packages = ["sentinelhub", "eolearn"] }

[tool.pytest.ini_options]
log_cli_level = "INFO"
markers = [
    "integration: marks tests that fully execute pipelines (and tend to be slow)",
    "chain: marks tests that represent an end-to-end pipeline execution",
]

[tool.mypy]
follow_imports = "normal"
ignore_missing_imports = true
show_column_numbers = true
show_error_codes = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_untyped_defs = true
disallow_untyped_decorators = true
warn_unreachable = true
strict_equality = true
pretty = true
plugins = ["pydantic.mypy"]

[tool.pydantic-mypy]
# init_forbid_extra = true  # cant be used unless we change managers
init_typed = true

[tool.nbqa.addopts]
ruff = ["--extend-ignore=E402,T201,B015,B018,NPY002,UP,FA"]
# E402 -> imports on top
# T201 -> print found
# B015 & B018 -> useless expression (used to show values in ipynb)
# NPY002 -> use RNG instead of old numpy.random
# UP -> suggestions for new-style classes (future import might confuse readers)
# FA -> necessary future annotations import

[tool.coverage.run]
source = ["eogrow"]

[tool.coverage.report]
omit = ["*/__init__.py"]
